一、父给子传
父组件中：
<child :任意名="父组件中的变量"></child>
子组件中：
props:["父组件定义的任意名"]
console.log(this.父组件定义的任意名); //输出即为父组件中的变量


二、子给父传
父组件中：
方法名1:function(msg){
       console.log("父组件接收子组件数据:"+msg);
}
<child @事件名1="方法名1"></child>
子组件中：
在子组件中的methods中定义任意函数，并在函数中执行
this.$emit("事件名1","传递的信息");//即可向父组件中发送信息"传递的信息"


三、ref 父组件直接操作子组件中数据
父组件中：
<child ref="任意名1"></child>
在父组件methods中定义任意函数，并在函数中执行
console.log("子组件名称:"+this.$refs.任意名1.子组件中变量名1);
子组件中：
data:function(){
     return {name:"子组件中变量名1"}
},


四、$parent 子组件之间操作父组件中数据
父组件中：
data:function(){
     return {父组件中变量名1:""}
},
子组件中：
在父组件methods中定义任意函数，并在函数中执行
this.$parent.父组件中变量名1="新内容";//将父组件中的变量1的值改为"新内容"


五、bus 组件间相互传递
创建公共  Vue对象
var bus = new Vue();
收：
在组件中methods里定义任意函数，并在函数中执行
bus.$on("别的组件发的消息名",function(msg){
         console.log("收到的消息:"+msg);
})
发:
在组件中methods里定义任意函数，并在函数中执行
bus.$emit("发送给别的组件的消息名","发送过去的信息");
